#!/bin/zsh

# Color Definitions

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[0;91m'
NC='\033[0m'

# UTF8 Icons

CHECK='\033[1;32m\u2713 \033[0m'
CROSS='\033[1;91m\u0445 \033[0m'
SEARCH='\033[1;34m==>\033[0m'
INSTALL='\033[1;32m==>\033[0m'
ERROR='\033[4;31mError\033[0m:'

function help() {
    echo "Description:"
    echo "  picq is a complete cli for developing embedded systems on the Microchip PIC16 and PIC18 microcontrollers."
    echo "  It bundles the sdcc compiler, which in turn bundles the gputils consisting of the gpasm assembler and gplink linker."
    echo "  For flashing the executable hex files to the target microcontroller, picq is utilising the picpgm cli."
    echo ""
    echo "Usage:"
    echo "  picq [OPTIONS...] <file_name> [<file_name>...]"
    echo ""
    echo "Option:"
    echo "  -i --install       Install the needed dependencies, if not already installed."
    echo "  -h --help          Display the help screen."
    echo "  -v --version       Display version of cli."
    echo "  --verbose          Run as verbosem, showing more information."
    echo "  -t --target        Specify the target microprocessor."
    echo "  -c --compile-only  Only compile the files. Dont flash to chip."
    echo "  -p --port          Specify the port on which to flash."
    echo "  -b --baud          Specify the BAUD rate. Default is 57600."
    echo "  -a --asemble       Asemble an .asm file, link it and create an executable. Dont flash."
    echo "  -f --flash         Flash a hex file to the microcontroller."
    echo ""
    echo "Example usage:"
    echo "  picq -c -t pic18f4550 main.c"
    echo "  picq -t pic18f4550 -p /dev/cu.usbmodemFD121 -b 9600 main.c"
    echo "  picq -c -t pic18f4550 main.c"
    echo "  picq -a -t pic18f4550 main.asm subfile.asm"
    echo "  picq -f -t pic18f4550 main.hex"
    echo ""
    echo "Further help:"
    echo "  picq home          Open the github page with further description."
}    

function check_for_packages() {
    # Check if the repository exists in the apt sources
    PPA=$(ls /etc/apt/sources.list.d | grep "fransschreuder1-usbpicprog-stable-xenial.list")

    echo "${SEARCH} Updating to remote repository..."
    sudo apt update

    # Add the repository for usbpicprog if not already added and update apt
    if [[ "$PPA" == "" ]]
    then
	echo "${INSTALL} Adding repository to apt"
	sudo add-apt-repository ppa:fransschreuder1/usbpicprog-stable
	echo "${INSTALL} Updating apt"
	sudo apt-get update
    fi
    
    # Look for the required packages - redirect STDERR to /dev/null
    SDCC_PKG_OK=$(dpkg-query -W  --showformat='${Status}' sdcc 2> /dev/null | grep -o "installed")
    PICPROG_PKG_OK=$(dpkg-query -W --showformat='${Status}' usbpicprog 2> /dev/null | grep -o "installed")

    # Enable the display of a progressbar when installing packages
    if [ ! -e /etc/apt/apt.conf.d/99progressbar ]
    then
	echo 'Dpkg::Progress-Fancy "1";' >> /etc/apt/apt.conf.d/99progressbar
    fi

    # Start looking for the packages, if grep returned an empty string, they dont exist. Install them
    echo "${SEARCH} Looking for SDCC"
    if [[ "$SDCC_PKG_OK" == "installed" ]]
    then
	echo "${SEARCH} ${CHECK}SDCC is $SDCC_PKG_OK"
	echo "${SEARCH{ Checking for update"
	sudo apt install --only-upgrade sdcc
    elif [[ "$SDCC_PKG_OK" == "" ]]
    then
	echo "${SEARCH} ${CROSS}SDCC is not installled"
	echo "${INSTALL} Installing SDCC"
	sudo apt install sdcc
    fi

    echo "${SEARCH} Looking for USBPICPPROG"
    if [[ "$PICPROG_PKG_OK" == "installed" ]]
    then
	echo "${SEARCH} ${CHECK}USBPICPROG is $PICPROG_PKG_OK"
	echo "${SEARCH} Checking for update"
	sudo apt install --only-upgrade usbpicprog
    elif [[ "$USBPICPROG" == "" ]]
    then
	echo "${SEARCH} ${CROSS}USBPICPROG is not installed"
	echo "${INSTALL} Installing USBPICPPROG"
	sudo apt install usbpicprog
    fi
}

function version() {
    
    echo "Current version picq is v0.1a."

    # Check to see what is the latest version somehow..
    # Compare the installed version with the latest version..
    # Ask if they would like to update, if not up to date..
}

function compile_only() {

    # Use sdcc to compile the file
    # Dont use the assembler or linker
}

function asemble() {

    # Use gpasm to asemble the file
    
    

}

case $1 in
    -h|--help)
	help
	;;
    -i|--install)
	check_for_packages
	;;
    -v|--version)
	version
	;;
    -c|--compile-only)
	compile_only
	;;
    -a|--asemble)
	asseble
	;;
    -f|--flash)
	flash
	;;
esac

    
